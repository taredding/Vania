<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss_minotaur_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//basic variables
start_y = y;
attack_type = 0;
randomize();
max_hp = 30;
hp = max_hp;
image_speed = 0.2;
pause_frames = 0;
invuln_frames = 0;
max_invuln_frames = 20;
init_y = y;
jump_speed = 12;
enraged = false;
//frame pause handlers

    //frames paused after choosing ranged attack
    choose_pause = 20;
    //frames paused after ranged attack
    ranged_attack_pause = 60;
    
    //frames paused when starting up a charge
    charge_begin_pause = 25;
    
    //frames paused when hitting wall
    wall_hit_pause = 80;
    
    frames_between_stomps = 20;
    
    frames_after_stomps = 40;

hsp = 0;
max_speed = 10;
min_speed = 1;
move_speed = min_speed;
dir = 0;
charge_frame_count = 0;
num_charge_attacks = 0;
max_charge_attacks = 3;

num_state_iterations = 0;

num_ranged_attacks = 0;
max_ranged_attacks = 3;

frames_before_switch = 60;
state = 0;
state_choose = 0;
state_attack_ranged = 1;
state_attack_charge = 2;
state_stomp = 3;
state_stun = 4;

charge_frame_count = 0;

num_stomps = 0;
max_stomps = 4;
vsp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>script_invuln_handler</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!invuln_frames){
    if (place_meeting(x, y, whipper) || place_meeting(x, y, obj_e_whipper)){
        invuln_frames = max_invuln_frames;
        hp--;
        if (!enraged &amp;&amp; hp &lt;= (max_hp / 2) + 3){
            wall_hit_pause /= 2;
            frames_after_stomps /= 2;
            ranged_attack_pause -= 20;
            max_charge_attacks += 2;
            max_ranged_attacks += 2;
            num_charge_attacks = 0;
            num_ranged_attacks = 0;
            state = state_stomp;
            jump_speed /= 2;
            image_index = 0;
            num_stomps = 0;
            y = start_y;
            enraged = true;
        }
        else if (hp &lt;= 0) {
            instance_create(x, y, obj_warp);
            instance_destroy();
        }
    }
}
if (pause_frames &lt;= 0){
    switch (state){
        case (state_choose):{
            //show_debug_message("state 0");
            image_xscale = -1 * sign(player.x - x);
            sprite_index = spr_minotaur_tapping;
            image_speed = 0;
            attack_type = irandom(1);
            image_index = 0;
            pause_frames = 10;
            num_state_iterations++;
            state = state_attack_ranged;
            break;
        }
        case (state_attack_ranged):{
            if (attack_type == 0){
                ranged_attack_type = obj_fire_wall;
            }
            else{
                ranged_attack_type = obj_damage_wall;
            }
            /**else {
                ranged_attack_type = obj_damage_wall;
            }*/
            ranged_attack = instance_create(x, 232, ranged_attack_type);
            image_index = 1;
            show_debug_message("wall attack");
            num_ranged_attacks++;
            pause_frames = choose_pause;
                
            if (num_ranged_attacks &gt;= max_ranged_attacks){
                num_ranged_attacks = 0;
                state++;
                pause_frames = ranged_attack_pause + 30;
            }
            else {
               state = state_choose;
               //image_index = irandom(1);
               pause_frames =  ranged_attack_pause;
            }
            //frames_before_switch--;
            break;
        }
        case (state_attack_charge):{
            image_blend = c_white;
            sprite_index = spr_boss_minotaur_charging;
            if (dir == 0){
                move_speed = min_speed;
                dir = sign(player.x - x);
                image_xscale = dir * -1;
                x -= image_xscale * 6;
            }
            hsp = move_speed * dir;
            if (place_meeting(x + hsp, y - 3, floorbox)){
                state = state_stun;
                while (!place_meeting(x + sign(hsp), y, floorbox)){
                    x += sign(hsp);
                }
                for (i = 0; i &lt; 4; i++){
                    next_fall = instance_create(16 * (i + 1 + irandom(9)), 0, obj_debris_drop);
                    with(next_fall){
                        move_speed = 4;
                    }
                }
                //x -= dir * 10;
                hsp = 0;
                pause_frames = wall_hit_pause / 2;
                //state = 0;
                dir = 0;
                charge_frame_count = 0;
                num_charge_attacks++;
                //sprite_index = spr_boss_minotaur_idle;
                if (num_charge_attacks &gt;= max_charge_attacks){
                    state = state_stomp;
                    image_index = 1;
                    num_charge_attacks = 0;
                    break;
                    hsp = 0;
                }
            }
            charge_frame_count++;
            x += hsp;
            if (charge_frame_count == 20){
                move_speed = max_speed;
                pause_frames =  charge_begin_pause;
            }
            /**if (charge_frame_count == 0 &amp;&amp; dir != sign(player.x - x)){
                sprite_index = spr_boss_minotaur_charging;
                move_speed = min_speed;
                dir = sign(player.x - x);
                image_xscale = dir * -1;
                image_speed = 0.2;
                show_debug_message("starting charge set");
            }
            else{
            
                if (charge_frame_count &lt; 20 &amp;&amp; charge_frame_count &gt; 0){
                    move_speed = min_speed;
                }
                else if (charge_frame_count == 20){
                    pause_frames = charge_begin_pause;
                }
                else if (charge_frame_count &gt; 20){
                    move_speed = max_speed;
                    image_speed = 0.4;
                }
                
                hsp = move_speed * dir;
                
                if (place_meeting(x + hsp, y, floorbox)){
                    while(!place_meeting(x + sign(hsp), y, floorbox)){
                        x += sign(hsp);
                    }
                    hsp = 0;
                    x += 30 * image_xscale;
                    num_charge_attacks++;
                    image_speed = 0.2;
                    sprite_index = spr_boss_minotaur_idle;
                    charge_frame_count = 0;
                    pause_frames = wall_hit_pause;
                    for (i = 0; i &lt; 4; i++){
                        next_fall = instance_create(16 * (i + 1 + irandom(9)), 24, obj_weapon_drop);
                        with(next_fall){
                            move_speed = 4;
                        }
                    }
                    if (num_charge_attacks &gt;= max_charge_attacks){
                        num_charge_attacks = 0;
                        pause_frames = ranged_attack_pause;
                        state ++;
                        hsp = 0;
                        dir = 0;
                        charge_frame_count = 0;
                    }
                
                }
                
                else {
                    x += hsp;
                    charge_frame_count++;
                }
            }*/
            break;
        }
        case (state_stun):{
            y = init_y;
            sprite_index = spr_boss_minotaur_idle;
            pause_frames = wall_hit_pause / 2;
            image_xscale = -1 * sign(player.x - x);
            x += image_xscale;
            state = state_attack_charge;
            break;
        }
        case (state_stomp):{
            sprite_index = spr_minotaur_tapping;
            image_xscale = -1 * sign(player.x - x);
            image_speed = 0;
            image_index = 0;
            vsp += 1;
            y += vsp;
            if (place_meeting(x, y + vsp, floorbox)){
                y = init_y;
                vsp = -jump_speed;
                image_index = 1;
                pause_frames = frames_between_stomps;
                num_stomps++;
                next_fall = instance_create(x + 16 * image_xscale * -1, 0, obj_debris_drop);
                with(next_fall){
                        move_speed = 4;
                }
                for (i = 0; i &lt; 4; i++){
                    next_fall = instance_create(16 * (i + 1 + irandom(9)), 0, obj_debris_drop);
                    with(next_fall){
                        move_speed = 4;
                    }
                }
            }
            
            if (num_stomps &gt;= max_stomps){
                vsp = 0;

                state = state_choose;
                num_stomps = 0;
                pause_frames = frames_after_stomps;
            }
            break;
        }
    }
}
else {
    pause_frames--;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="player">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>script_player_damage</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(view_xview, view_yview + 80, "Boss HP: " + string(hp));
draw_text(view_xview, view_yview + 100, "Boss hsp: " + string(hsp));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
