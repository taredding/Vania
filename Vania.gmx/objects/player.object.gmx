<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//view_xview[0] = x;
//view_yview[0] = y - 150;
stairs_direction = 1;
stairs_slower = 0;
key_crouch = 0;
new_code = true;
max_hp = 5;
//hp = max_hp;
///initialize variables
invuln_wait = 80;
invuln_frames = 0;
grav = 0.1;
hsp = 0;
vsp = 0;
jumpspeed = 3.1;
movespeed = 1;
midair = false;
//canMove = true;
isAttacking = false;
isAttackingE = false;
isCrouching = false;
//move_speed = 0;
can_move = true;
image_speed = 0.1;
on_stairs = false;
attackAvailable = true;
instance_create(x, y, obj_GUI);

//used for moving platforms;
hsp_carry = 0;

//this variable is used to check if the player is on the ground while on stairs
on_ground = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle invulnerability frames

if (invuln_frames){
    if (visible){
        visible = false;
    }
    else {
        visible = true;
    }
    invuln_frames--;
}
else{
    if (!visible){
        visible = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///read input from controller analogue stick, convert it to digital input
haxis = gamepad_axis_value(0, gp_axislh);
if (haxis &lt; 0){
    ax_left = 1;
    ax_right = 0;
}
else if (haxis &gt; 0){
    ax_left = 0;
    ax_right = 1;
}
else {
    ax_left = 0;
    ax_right = 0;
}
vaxis = gamepad_axis_value(0, gp_axislv);
if (vaxis &lt; 0){
    ax_down = 0;
    ax_up = 1;
}
else if (vaxis &gt; 0){
    ax_down = 1;
    ax_up = 0;
}
else {
    ax_down = 0;
    ax_up = 0;
}
///determine if player is holding an up key
key_up = max(keyboard_check(vk_up), ax_up);
///determine if player is on ground
on_ground = place_meeting(x, y + 1, floorbox);
///determine if player is midair, on_stairs need to be checked, because the player is technically midair when climbing stairs
midair = (!on_ground &amp;&amp; !on_stairs);
///Final calculation of directional keys, based on both keyboard values and controller joystick
key_right = max(keyboard_check(vk_right), ax_right);
key_left = -max(keyboard_check(vk_left), ax_left);
key_jump = max(keyboard_check_pressed(ord("Z")), gamepad_button_check_pressed(0, gp_face2));
key_down = max(keyboard_check(vk_down), ax_down);
///If player isn't using an attack, then they can crouch
if (!isAttackingE){
    key_crouch = key_down;
}
///Checking if player hit a button/key to do a normal whip attack
key_attack = max(keyboard_check_pressed(ord("X")), gamepad_button_check_pressed(0, gp_face1));
///Checking if player is trying to do an electric whip attack
key_attack_e = max(keyboard_check_pressed(ord("C")), gamepad_button_check_pressed(0, gp_face4));
///Determine if player is holding any whip key. This is useful later if they're swinging,
///(when key is held, player continues swinging, when key is released, they swing off the hook)
key_swing = max(keyboard_check(ord("X")), keyboard_check(ord("C")), gamepad_button_check(0, gp_face4), gamepad_button_check(0, gp_face1));

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>can_move</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///scrapped stairs code
/**
dir = key_left + key_right;
sprite_index = spr_player_idle;
hsp = dir * movespeed;
//vsp = 0;
//key_right = 0;
//key_left = 0;
//key_crouch = 0;
x += dir * 2;
y -= dir * 2;
while (place_meeting(x, y, floorbox)){
    y--;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///modify input and choose initial sprite

//scrapped shield code
/**
if (key_attack_e &amp;&amp; !isAttacking &amp;&amp; !midair){
    key_left = 0;
    key_right = 0;
    key_jump = 0;
    key_attack = 0;
    isAttackingE = true;
    if (key_crouch){
        sprite_index = spr_player_crouch_attack;
    }
    else {
        sprite_index = spr_player_attack;        
    }
    instance_create(x, y, obj_);
}
else{
    isAttackingE = false;
}*/

if (!isAttacking){
    if (key_attack){
        isAttacking = true;
        whip_type = whipper;
    }
    else if (key_attack_e){
        isAttacking = true;
        whip_type = obj_e_whipper;
    }
}

if (!midair){
    if (isAttacking || isAttackingE){
        hsp = 0;
        key_left = 0;
        key_right = 0;
        key_jump = 0;
    }
    
    
    //handle crouch
    else if (key_crouch){
        key_left = 0;
        key_right = 0;
        key_jump = 0;
        vsp = 0;
        hsp = 0;
        sprite_index = spr_player_crouch;
        hsp = 0;

    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle attack





//attack
if (isAttacking){
    texture_set_blending(true);
    if (whip_type == whipper){
        image_blend = c_red;
    }
    else {
        image_blend = c_blue;
    }
    if (!midair){
        key_left = 0;
        key_right = 0;
        hsp = 0;
        vsp = 0;
    }
    if (sprite_index != spr_player_attack &amp;&amp; sprite_index != spr_player_crouch_attack){ 
        if (sprite_index == spr_player_crouch){
            sprite_index = spr_player_crouch_attack;
        }
        else{
            sprite_index = spr_player_attack;
        }
        image_speed = 0.1;
        image_index = 0;
    }
    
    if (image_index &gt;= 1 &amp;&amp; attackAvailable){
        //show_debug_message("attack frame");
        attack = instance_create(x, y, whip_type);
        if (image_xscale &lt; 0){
            with(attack){
                image_xscale *= -1;
            }
        }
        attackAvailable = false;
    }
    else if (image_index &gt;= 2){
        if (sprite_index == spr_player_crouch_attack){
            sprite_index = spr_player_crouch;
        }
        else {
            sprite_index = spr_player_idle;
        }
        image_index = 0;
        isAttacking = false;
        attackAvailable = true;
        image_blend =  c_white;
        //texture_set_blending(false)
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle horizontal movement
if (!midair &amp;&amp; !isAttacking &amp;&amp; !key_crouch &amp;&amp; !isAttackingE){
    move = key_left + key_right;
    hsp = move * movespeed;
    if (hsp != 0){
        if (sprite_index != spr_player_walking){
            sprite_index = spr_player_walking;
            image_index = 0;
        }
        //image_index = 0;
        image_speed = 0.07;
        
        if (hsp &gt; 0 &amp;&amp; image_xscale &lt; 0 || hsp &lt; 0 &amp;&amp; image_xscale &gt; 0){
            image_xscale *= -1;
            x -= sign(image_xscale);
        }
    }
}
hsp_final = hsp + hsp_carry;
hsp_carry = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///on ground check and jump check

if (!isAttacking &amp;&amp; !isAttackingE){
    if (key_jump &amp;&amp; !midair){
        vsp = -jumpspeed;
        midair = true;
    }
    if (midair){
        image_speed = 0;
        sprite_index = spr_player_jump;
        if (hsp == 0){
            image_index = 0;
        }
        else {
            image_index = 1;
        }
        
    }
    else if (hsp == 0){
        if (key_crouch){
            sprite_index = spr_player_crouch;
        }
        else {
            sprite_index = spr_player_idle;
        }
    }

}
if (sprite_index == spr_player_crouch || sprite_index == spr_player_crouch_attack){
    mask_index = spr_player_crouch;
}
else {
    mask_index = spr_player_idle;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle collision

/**if (!place_meeting(x + hsp, y + 2, floorbox) &amp;&amp; place_meeting(x + hsp, y + 3, obj_stairs)){
    y += 2;
}*/

if (place_meeting(x + hsp_final, y, floorbox)){
    while(!place_meeting(x + sign(hsp_final), y, floorbox)){
        x += sign(hsp_final);
    }
    hsp_final = 0;
}


if (vsp &lt; 10){
    vsp += grav;
}

//horizontal collision
/**if (place_meeting(x + hsp, y, floorbox)){
    while(!place_meeting(x + sign(hsp), y - 1, floorbox)){
        x += sign(hsp);
    }
    hsp = 0;
}*/
x += hsp_final; 
//vertical collision
if (place_meeting(x, y + vsp, floorbox)){
    while(!place_meeting(x, y + vsp, floorbox)){
        y += sign(vsp);
    }
    vsp = 0;
}

y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///handle attack on stairs
if (on_stairs){
    on_ground_stairs_check = place_meeting(x, y + 1, floorbox);
    if (key_attack &amp;&amp; image_index != spr_player_attack){
        isAttacking = true;
    }

    
    
    
    
    //attack
    if (isAttacking){
        key_left = 0;
        key_right = 0;
        key_up = 0;
        key_down = 0;
        if (sprite_index != spr_player_attack){ 
            sprite_index = spr_player_attack;
            image_speed = 0.1;
            image_index = 0;
        }
        
        if (image_index == 1 &amp;&amp; attackAvailable){
            //show_debug_message("attack frame");
            attack = instance_create(x, y, whipper);
            if (image_xscale &lt; 0){
                with(attack){
                    image_xscale *= -1;
                }
            }
            attackAvailable = false;
        }
        else if (image_index == 2){
            sprite_index = spr_player_idle;
            image_index = 0;
            isAttacking = false;
            attackAvailable = true;
            
        }
        
        
    }
    if (!stairs_slower){ 
        move = sign(stairs_direction * (key_left + key_right) + (player.key_up - player.key_down));
        if (move != 0){
            player.image_xscale = move * stairs_direction;
        }
        x += move * stairs_direction;
        player.y -= move;
        stairs_slower = 1;
    }
    else{
        stairs_slower--;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_fullscreen(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.hp = player.max_hp;
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>225</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_previous_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>221</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_previous_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="78">
      <action>
        <libid>1</libid>
        <id>226</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
